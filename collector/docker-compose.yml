services:
  debian-collector:
    image: debian:12-slim
    privileged: true
    volumes:
      - ${PWD}/essential_pkgs:/data
    working_dir: /data
    entrypoint: ["/bin/sh","-c"]
    environment:
    - PACKAGES=docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin sudo adduser git git-man tmux curl passwd
    - DOCKER_ASC=/etc/apt/keyrings/docker.asc
    - DOCKER_URL=https://download.docker.com/linux/debian
    command:
    - |
      # Install docker debian package repo
      apt-get update
      # Note: dpkg-dev brings in oodles of extra deps.
      apt-get install -y ca-certificates curl apt-rdepends dpkg-dev
      install -m 0755 -d /etc/apt/keyrings

      if [ ! -e "/etc/apt/keyrings/docker.asc" ]; then
        curl -fsSL https://download.docker.com/linux/debian/gpg \
          -o /etc/apt/keyrings/docker.asc
        chmod a+r /etc/apt/keyrings/docker.asc
      fi
      
      if [ ! -e "/etc/apt/sources.list.d/docker.list" ]; then
        echo \
          "deb [arch=$$(dpkg --print-architecture) signed-by=$$DOCKER_ASC] $$DOCKER_URL \
          $$(. /etc/os-release && echo "$$VERSION_CODENAME") stable" | \
          tee /etc/apt/sources.list.d/docker.list > /dev/null
      fi
      apt-get update

      # Download packages dependencies
      install -m 0777 -d /data/debian
      cd /data/debian
      apt-get update
      apt-get download $$(apt-rdepends $$PACKAGES|grep -v "^ "|grep -v "^debconf-2.0$$")
      dpkg-scanpackages . /dev/null | gzip -9c > Packages.gz
      rm -f /data/debian/.apt-acquire-privs-test*

  alpine-collector:
    image: alpine:latest
    privileged: true
    volumes:
      - ${PWD}/essential_pkgs:/data
    working_dir: /data
    entrypoint: ["/bin/sh","-c"]
    command:
    - |
      install -m 0777 -d /data/alpine/x86_64
      cd /data/alpine/x86_64
      apk update
      apk fetch -R dnsmasq
      apk fetch -R ansible
      apk fetch -R docker docker-cli-buildx docker-cli-compose
      apk fetch -R nodejs
      apk index --rewrite-arch x86_64 -o APKINDEX.tar.gz *.apk
  
  docker-collector:
    image: alpine:latest
    privileged: true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${PWD}/essential_pkgs:/data
    working_dir: /data
    entrypoint: ["/bin/sh","-c"]
    command:
    - |
      install -m 0777 -d /data/docker
      cd /data/docker
      apk add -U docker

      try_pull () {
        IMAGE_NAME=$$1
        LAB_TAG=$$2
        IMAGE_FILE=$$3
        IMAGE_EXISTS=0

        if [ -e "$$IMAGE_FILE" ]; then
          echo "$$IMAGE_NAME already downloaded. Skipping save."
        else
          if [ -z "$$(docker images -q $$IMAGE_NAME 2>/dev/null)" ]; then
            docker pull $$IMAGE_NAME
          else
            echo "$$IMAGE_NAME already pulled. Skipping download."
            IMAGE_EXISTS=1
          fi

          docker tag $$IMAGE_NAME $$LAB_TAG
          docker save -o $$IMAGE_FILE $$LAB_TAG

          if [ $$IMAGE_EXISTS -eq 0 ]; then
            echo "$$IMAGE_NAME didn't exist before. Removing $$IMAGE_NAME."
            docker rmi $$IMAGE_NAME $$LAB_TAG
          fi
        fi
      }

      try_pull \
        alpine:latest \
        git.lab/dockerhub/alpine:latest \
        git.lab%2Fdockerhub%2Falpine%3Alatest.dockerimage
      try_pull \
        caddy:alpine \
        git.lab/dockerhub/caddy:alpine \
        git.lab%2Fdockerhub%2Fcaddy%3Aalpine.dockerimage
      try_pull \
        gitea/gitea:latest \
        git.lab/dockerhub/gitea:latest \
        git.lab%2Fdockerhub%2Fgitea%3Alatest.dockerimage
      try_pull \
        gitea/act_runner:latest \
        git.lab/dockerhub/act_runner:latest \
        git.lab%2Fdockerhub%2Fact_runner%3Alatest.dockerimage
      try_pull \
        vaultwarden/server:latest \
        git.lab/dockerhub/vaultwarden:latest \
        git.lab%2Fdockerhub%2Fvaultwarden%3Alatest.dockerimage
      try_pull \
        node:lts-alpine \
        git.lab/dockerhub/node:lts-alpine \
        git.lab%2Fdockerhub%2Fnode%3Alts-alpine.dockerimage
      try_pull \
        postgres:14 \
        git.lab/dockerhub/postgres:14 \
        git.lab%2Fdockerhub%2Fpostgres%3A14.dockerimage

      try_pull \
        ghcr.io/fluxcd/notification-controller:v1.3.0 \
        git.lab/ghcr.io/fluxcd-notification-controller:v1.3.0 \
        git.lab%2Fghcr.io%2Ffluxcd-notification-controller%3Av1.3.0.dockerimage
      try_pull \
        ghcr.io/fluxcd/kustomize-controller:v1.3.0 \
        git.lab/ghcr.io/fluxcd-kustomize-controller:v1.3.0 \
        git.lab%2Fghcr.io%2Ffluxcd-kustomize-controller%3Av1.3.0.dockerimage
      try_pull \
        ghcr.io/fluxcd/helm-controller:v1.0.1 \
        git.lab/ghcr.io/fluxcd-helm-controller:v1.0.1 \
        git.lab%2Fghcr.io%2Ffluxcd-helm-controller%3Av1.0.1.dockerimage
      try_pull \
        ghcr.io/fluxcd/source-controller:v1.3.0 \
        git.lab/ghcr.io/fluxcd-source-controller:v1.3.0 \
        git.lab%2Fghcr.io%2Ffluxcd-source-controller%3Av1.3.0.dockerimage
      try_pull \
        ghcr.io/fluxcd/image-automation-controller:v0.38.0 \
        git.lab/ghcr.io/fluxcd-image-automation-controller:v0.38.0 \
        git.lab%2Fghcr.io%2Ffluxcd-image-automation-controller%3Av0.38.0.dockerimage
      try_pull \
        ghcr.io/fluxcd/image-reflector-controller:v0.32.0 \
        git.lab/ghcr.io/fluxcd-image-reflector-controller:v0.32.0 \
        git.lab%2Fghcr.io%2Ffluxcd-image-reflector-controller%3Av0.32.0.dockerimage

      chmod 755 /data/docker/*
      
  github-collector:
    image: alpine:latest
    privileged: true
    volumes:
      - ${PWD}/essential_pkgs:/data
    working_dir: /data
    entrypoint: ["/bin/sh","-c"]
    command:
    - |
      apk -U add curl git

      # Download Github Actions
      install -m 0777 -d /data/github/actions
      cd /data/github/actions
      git clone --mirror https://github.com/actions/checkout.git checkout
      cd checkout && git bundle create ../checkout.bundle --all && cd ..
      rm -rf checkout

      install -m 0777 -d /data/github/docker
      cd /data/github/docker
      git clone --mirror https://github.com/docker/login-action.git login-action
      cd login-action && git bundle create ../login-action.bundle --all && cd ..
      rm -rf login-action

      install -m 0777 -d /data/github/docker
      cd /data/github/docker
      git clone --mirror https://github.com/docker/build-push-action.git build-push-action
      cd build-push-action && git bundle create ../build-push-action.bundle --all && cd ..
      rm -rf build-push-action

      # https://github.com/corneliusweig/ketall/releases
      install -m 0777 -d /data/github/ketall
      cd /data/github/ketall
      if [ -e "get-all-amd64-linux.tar.gz" ]; then
        echo "get-all-amd64-linux.tar.gz already downloaded. Skipping."
      else
        curl -LO https://github.com/corneliusweig/ketall/releases/download/v1.3.8/get-all-amd64-linux.tar.gz
      fi

      # https://github.com/fluxcd/flux2/releases
      install -m 0777 -d /data/github/fluxcd
      cd /data/github/fluxcd
      if [ -e "flux_2.3.0_linux_amd64.tar.gz" ]; then
        echo "flux_2.3.0_linux_amd64.tar.gz already downloaded. Skipping."
      else
        curl -LO https://github.com/fluxcd/flux2/releases/download/v2.3.0/flux_2.3.0_linux_amd64.tar.gz
      fi

      # https://github.com/k3s-io/k3s/releases
      install -m 0777 -d /data/github/k3s-io
      cd /data/github/k3s-io

      if [ -e "k3s" ]; then
        echo "k3s already downloaded. Skipping."
      else
        curl -LO https://github.com/k3s-io/k3s/releases/download/v1.30.0%2Bk3s1/k3s
      fi
      chmod +x k3s

      if [ -e "k3s-airgap-images-amd64.tar.gz" ]; then
        echo "k3s-airgap-images-amd64.tar.gz already downloaded. Skipping."
      else
        curl -LO https://github.com/k3s-io/k3s/releases/download/v1.30.0%2Bk3s1/k3s-airgap-images-amd64.tar.gz
      fi

      # Note: Build everytime to account for adjusting network interfaces.
      cat >install_k3s.sh <<EOF
      #!/bin/sh
      LAN_LISTEN_IFACE=\$(ip r s | grep ^default | cut -d ' ' -f5)
      LAN_LISTEN_ADDR=\$(ip addr show \$$LAN_LISTEN_IFACE | grep "inet\b" | awk '{print \$2}' | cut -d/ -f1)
      INSTALL_K3S_SKIP_DOWNLOAD=true
      INSTALL_K3S_EXEC="--write-kubeconfig-mode 660"
      INSTALL_K3S_EXEC="\$$INSTALL_K3S_EXEC --disable traefik"
      INSTALL_K3S_EXEC="\$$INSTALL_K3S_EXEC --node-ip \$$LAN_LISTEN_ADDR "
      INSTALL_K3S_EXEC="\$$INSTALL_K3S_EXEC --node-external-ip \$$LAN_LISTEN_ADDR "
      INSTALL_K3S_EXEC="\$$INSTALL_K3S_EXEC --advertise-address \$$LAN_LISTEN_ADDR "
      INSTALL_K3S_EXEC="\$$INSTALL_K3S_EXEC --bind-address \$$LAN_LISTEN_ADDR"
      echo ""
      EOF
      curl https://get.k3s.io >> install_k3s.sh
      chmod +x install_k3s.sh
