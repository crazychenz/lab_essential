---
apiVersion: v1
kind: Namespace
metadata:
  creationTimestamp: null
  name: caddy-router-ns
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: caddy-router-deployment
  namespace: caddy-router-ns
spec:
  replicas: 1
  selector:
    matchLabels:
      app: caddy-router
  template:
    metadata:
      labels:
        app: caddy-router
    spec:
      initContainers:
      #- name: wait-for-dnsmasq
      #  image: busybox:1.32
      #  command: ['sh', '-c', 'until nslookup dnsmasq.default.svc.cluster.local; do echo waiting for dnsmasq; sleep 2; done;']
      #- name: wait-for-caddy_certs_init
      #  image: busybox:1.32
      #  command: ['sh', '-c', 'until nc -z caddy_certs_init 443; do echo waiting for caddy_certs_init; sleep 2; done;']
      - name: caddy-certs-init
        image: git.lab/lab/caddy_certs_init:initial
        volumeMounts:
        - name: certs-path
          mountPath: /certs
      #dnsConfig:
      #  nameservers: [ "192.168.1.5" ]
      #  searches: [ "lab" ]
      containers:
      - name: caddy
        image: git.lab/lab/caddy:initial
        volumeMounts:
        - name: caddy-config-path
          mountPath: /config
        - name: certs-path
          mountPath: /data/caddy/pki/authorities/local
      volumes:
      - name: certs-path
        hostPath: { path: /opt/state/caddy_certs_init/certs }
      - name: caddy-config-path
        hostPath: { path: /opt/state/caddy_router_svc/config }
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1

---
# Handled by ServiceLB (i.e. Klipper) in K3s
apiVersion: v1
kind: Service
metadata:
  name: caddy-router-service
  namespace: caddy-router-ns
spec:
  selector:
    app: caddy-router
  type: LoadBalancer
  ports:
  - name: caddy-http
    protocol: TCP
    port: 80
    targetPort: 80
  - name: caddy-https
    protocol: TCP
    port: 443
    targetPort: 443