apiVersion: apps/v1
kind: Deployment
metadata:
  name: rproxy-deployment
  namespace: lan-lab-rproxy-ns
spec:
  replicas: 2
  selector:
    matchLabels:
      app: lan-lab-rproxy
  template:
    metadata:
      labels:
        app: lan-lab-rproxy
    spec:
      initContainers:
      - name: caddy-certs-init
        image: git.lab.lan/lab/caddy_certs_init:stage
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: internal-certs-path
          mountPath: /certs
      dnsPolicy: ClusterFirstWithHostNet
      containers:
      - name: lan-lab-rproxy
        image: git.lab.lan/lab/caddy_rproxy:stage # {"$imagepolicy": "lan-lab-rproxy-ns:rproxy-flux-img-select-policy"}
        volumeMounts:
        - name: caddyfile-config
          mountPath: /etc/caddy/Caddyfile
          subPath: Caddyfile
        - name: caddy-config-path
          mountPath: /config
        - name: internal-certs-path
          mountPath: /data/caddy/pki/authorities/local
        - name: external-certs-path
          mountPath: /opt/state/certs
      volumes:
      - name: caddyfile-config
        configMap:
          name: rproxy-caddyfile-cfgmap
          items: [ { key: Caddyfile, path: Caddyfile } ]
      - name: caddy-config-path
        hostPath: { path: /opt/state/lan-lab-rproxy/config }
      - name: internal-certs-path
        hostPath: { path: /opt/state/lan-lab-rproxy/certs }
      - name: external-certs-path
        hostPath: { path: /opt/state/certs }
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1


# If there is an issue with rollout restart, it may be bad certificate data.
# Check with: `nonuser@node0:/opt/state/certs$ ls -lR | grep pem`